
import { useState } from 'react';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  CardFooter 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { DeepfakeAnalysisResult } from './types';
import { 
  AlertTriangle, 
  CheckCircle, 
  Download,
  FileText,
  ShieldCheck,
  ShieldX,
  BarChart3
} from 'lucide-react';
import { saveDeepfakeResult } from '@/utils/localStorageUtils';

interface DeepfakeReportProps {
  result: DeepfakeAnalysisResult;
  imageSrc: string;
  onClose: () => void;
}

export function DeepfakeReport({ result, imageSrc, onClose }: DeepfakeReportProps) {
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  
  const confidencePercent = Math.round(result.confidence * 100);
  const scorePercent = Math.round(result.score * 100);
  
  const generateReport = () => {
    setIsGeneratingReport(true);
    
    // Make sure the result is saved to local storage
    saveDeepfakeResult(result);
    
    // Create content for the report
    const reportContent = `
CYBERCRIME DIVISION
FORENSIC IMAGE ANALYSIS REPORT
-------------------------------

ANALYSIS ID: ${result.analysisId}
DATE: ${new Date(result.analysisTimestamp).toLocaleString()}

IMAGE AUTHENTICITY ASSESSMENT
----------------------------
Authenticity Score: ${scorePercent}/100
Confidence Level: ${confidencePercent}%
Determination: ${result.isDeepfake ? 'LIKELY MANIPULATED/SYNTHETIC' : 'LIKELY AUTHENTIC'}
Faces Detected: ${result.detectedFaceCount || 'N/A'}

TECHNICAL DETAILS
---------------
${result.metadata?.generationMethod ? `Detected Generation Method: ${result.metadata.generationMethod}` : ''}
${result.metadata?.manipulationScore ? `Manipulation Score: ${Math.round(result.metadata.manipulationScore * 100)}%` : ''}
${result.metadata?.faceInconsistencies ? `Face Inconsistencies: ${result.metadata.faceInconsistencies}` : ''}

${result.metadata?.detectedArtifacts && result.metadata.detectedArtifacts.length > 0 ? 
`Detected Artifacts: ${result.metadata.detectedArtifacts.join(', ')}` : 'No specific artifacts detected'}

ANALYSIS SUMMARY
--------------
${result.isDeepfake 
  ? 'The submitted image exhibits characteristics consistent with synthetic generation or manipulation. Forensic markers indicate possible use of generative adversarial networks (GANs) or other AI-based image synthesis methods. This image should not be considered as authentic photographic evidence.'
  : 'The submitted image does not contain significant indicators of digital manipulation or synthetic generation. While no detection system is infallible, this image appears to contain natural photographic elements consistent with authentic imagery.'}

METHODOLOGY
----------
- Deep neural network analysis for pattern detection
- Frequency domain artifact assessment
- Metadata consistency verification
- Facial geometry coherence testing

RECOMMENDATIONS
-------------
${result.isDeepfake
  ? 'This image should be marked as potentially manipulated and should not be used as evidence in legal proceedings without additional verification. Further investigation into the source of the image is recommended.'
  : 'While the image appears authentic, standard verification protocols should still be followed for any critical use cases. Cross-reference with other evidence when possible.'}

REPORT GENERATED BY: Cybercrime Division, Deepfake Detection System
AUTHORIZATION LEVEL: LAW ENFORCEMENT / INTERNAL USE ONLY
    `;
    
    // Create a blob and download it
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `deepfake-analysis-report-${new Date().toISOString().substring(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    setIsGeneratingReport(false);
  };
  
  return (
    <Card className="border-cyber-primary/20 bg-cyber-dark/90 backdrop-blur-sm">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {result.isDeepfake ? (
            <>
              <ShieldX className="h-5 w-5 text-red-500" />
              <span className="text-red-500">Deepfake Detected</span>
            </>
          ) : (
            <>
              <ShieldCheck className="h-5 w-5 text-green-500" />
              <span className="text-green-500">Authentic Image</span>
            </>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <img 
              src={imageSrc} 
              alt="Analyzed image" 
              className="w-full h-auto border border-cyber-primary/20 rounded-md"
            />
          </div>
          
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium mb-1">Analysis Results:</h3>
              <div className="space-y-3">
                <div>
                  <span className="text-xs text-muted-foreground">Authenticity Score:</span>
                  <div className="relative pt-1">
                    <Progress 
                      value={100 - scorePercent} 
                      className="h-2 mt-1" 
                    />
                    <div className="absolute top-0 left-0 w-full">
                      <Progress 
                        value={100 - scorePercent} 
                        className={`h-2 ${result.isDeepfake ? "bg-red-500" : "bg-green-500"}`}
                      />
                    </div>
                  </div>
                  <div className="flex justify-between text-xs mt-1">
                    <span>Synthetic ({scorePercent}%)</span>
                    <span>Authentic ({100 - scorePercent}%)</span>
                  </div>
                </div>
                
                <div>
                  <span className="text-xs text-muted-foreground">Confidence:</span>
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">{confidencePercent}%</span>
                    <Badge variant={confidencePercent > 80 ? "default" : "outline"}>
                      {confidencePercent > 80 ? "High" : confidencePercent > 50 ? "Medium" : "Low"}
                    </Badge>
                  </div>
                </div>
                
                {result.detectedFaceCount && (
                  <div>
                    <span className="text-xs text-muted-foreground">Faces detected:</span>
                    <span className="text-sm font-medium block">{result.detectedFaceCount}</span>
                  </div>
                )}
                
                {result.metadata && (
                  <div className="space-y-2 bg-cyber-primary/5 rounded-md p-2 mt-2">
                    <h4 className="text-xs font-semibold flex items-center">
                      <BarChart3 className="h-3 w-3 mr-1" />
                      Technical Details
                    </h4>
                    
                    {result.metadata.generationMethod && (
                      <div>
                        <span className="text-xs text-muted-foreground">Detection method:</span>
                        <span className="text-xs font-medium block">{result.metadata.generationMethod}</span>
                      </div>
                    )}
                    
                    {result.metadata.manipulationScore !== undefined && (
                      <div>
                        <span className="text-xs text-muted-foreground">Manipulation score:</span>
                        <span className="text-xs font-medium block">
                          {Math.round(result.metadata.manipulationScore * 100)}%
                        </span>
                      </div>
                    )}
                    
                    {result.metadata.faceInconsistencies !== undefined && (
                      <div>
                        <span className="text-xs text-muted-foreground">Face inconsistencies:</span>
                        <span className="text-xs font-medium block">{result.metadata.faceInconsistencies}</span>
                      </div>
                    )}
                    
                    {result.metadata.detectedArtifacts && result.metadata.detectedArtifacts.length > 0 && (
                      <div>
                        <span className="text-xs text-muted-foreground">Artifacts:</span>
                        <span className="text-xs font-medium block">{result.metadata.detectedArtifacts.join(', ')}</span>
                      </div>
                    )}
                  </div>
                )}
                
                <div>
                  <span className="text-xs text-muted-foreground">Analysis time:</span>
                  <span className="text-sm font-medium block">
                    {new Date(result.analysisTimestamp).toLocaleString()}
                  </span>
                </div>
              </div>
            </div>
            
            <Alert className={result.isDeepfake ? "border-red-500 bg-red-500/10" : "border-green-500 bg-green-500/10"}>
              {result.isDeepfake ? (
                <AlertTriangle className="h-4 w-4 text-red-500" />
              ) : (
                <CheckCircle className="h-4 w-4 text-green-500" />
              )}
              <AlertDescription>
                {result.isDeepfake 
                  ? "This image appears to be synthetically generated or manipulated. Use with caution."
                  : "This image appears to be authentic with no significant indicators of manipulation."}
              </AlertDescription>
            </Alert>
            
            <div className="pt-2">
              <Button 
                onClick={generateReport} 
                className="w-full"
                disabled={isGeneratingReport}
              >
                <FileText className="mr-2 h-4 w-4" />
                {isGeneratingReport ? "Generating Report..." : "Generate Forensic Report"}
              </Button>
              
              <Button 
                variant="outline" 
                className="w-full mt-2"
                onClick={() => {
                  // Create a blob and download the image
                  fetch(imageSrc)
                    .then(res => res.blob())
                    .then(blob => {
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `analyzed-image-${new Date().toISOString().substring(0, 10)}.png`;
                      document.body.appendChild(a);
                      a.click();
                      document.body.removeChild(a);
                      URL.revokeObjectURL(url);
                    });
                }}
              >
                <Download className="mr-2 h-4 w-4" />
                Download Image with Analysis
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-end pt-2 pb-4">
        <Button variant="secondary" onClick={onClose}>Close Report</Button>
      </CardFooter>
    </Card>
  );
}
