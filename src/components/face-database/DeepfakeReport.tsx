import { useState } from 'react';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  CardFooter 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { DeepfakeAnalysisResult } from './types';
import { 
  AlertTriangle, 
  CheckCircle, 
  Download,
  FileText,
  ShieldCheck,
  ShieldX,
  BarChart3,
  Clock,
  Loader2,
  AlertCircle,
  FileDown
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

interface DeepfakeReportProps {
  result: DeepfakeAnalysisResult;
  imageSrc: string;
  onClose: () => void;
}

export function DeepfakeReport({ result, imageSrc, onClose }: DeepfakeReportProps) {
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [isDownloadingImage, setIsDownloadingImage] = useState(false);
  const { toast } = useToast();
  
  const confidencePercent = Math.round(result.confidence * 100);
  const scorePercent = Math.round(result.score * 100);
  
  // Adjust detectedFaceCount to be more accurate
  const faceCount = result.detectedFaceCount || 1;
  
  const generateReport = () => {
    setIsGeneratingReport(true);
    
    // Create content for the report
    const reportContent = `
CYBERCRIME DIVISION
FORENSIC IMAGE ANALYSIS REPORT
-------------------------------

ANALYSIS ID: ${result.analysisId}
DATE: ${new Date(result.analysisTimestamp).toLocaleString()}

IMAGE AUTHENTICITY ASSESSMENT
----------------------------
Authenticity Score: ${100 - scorePercent}/100
Manipulation Score: ${scorePercent}/100
Confidence Level: ${confidencePercent}%
Determination: ${result.isDeepfake ? 'LIKELY MANIPULATED/SYNTHETIC' : 'LIKELY AUTHENTIC'}
Faces Detected: ${faceCount || 'N/A'}

TECHNICAL DETAILS
---------------
${result.metadata?.generationMethod ? `Detected Generation Method: ${result.metadata.generationMethod}` : 'No generation method detected'}
${result.metadata?.manipulationScore ? `Manipulation Score: ${Math.round(result.metadata.manipulationScore * 100)}%` : ''}
${result.metadata?.faceInconsistencies ? `Face Inconsistencies: ${result.metadata.faceInconsistencies}` : 'No face inconsistencies detected'}

${result.metadata?.detectedArtifacts && result.metadata.detectedArtifacts.length > 0 ? 
`Detected Artifacts: ${result.metadata.detectedArtifacts.join(', ')}` : 'No specific artifacts detected'}

ANALYSIS SUMMARY
--------------
${result.isDeepfake 
  ? 'The submitted image exhibits characteristics consistent with synthetic generation or manipulation. Forensic markers indicate possible use of generative adversarial networks (GANs) or other AI-based image synthesis methods. This image should not be considered as authentic photographic evidence.'
  : 'The submitted image does not contain significant indicators of digital manipulation or synthetic generation. While no detection system is infallible, this image appears to contain natural photographic elements consistent with authentic imagery.'}

METHODOLOGY
----------
- Deep neural network analysis for pattern detection
- Frequency domain artifact assessment
- Metadata consistency verification
- Facial geometry coherence testing
- Neural inconsistency detection algorithm

RECOMMENDATIONS
-------------
${result.isDeepfake
  ? 'This image should be marked as potentially manipulated and should not be used as evidence in legal proceedings without additional verification. Further investigation into the source of the image is recommended.'
  : 'While the image appears authentic, standard verification protocols should still be followed for any critical use cases. Cross-reference with other evidence when possible.'}

FACE DETECTION RESULTS
--------------------
Number of faces detected: ${faceCount}
${faceCount > 1 ? 'Multiple faces detected in the image - individual face analysis available on request.' : ''}

LEGAL FRAMEWORK
--------------
This analysis may be relevant under the following Indian legal frameworks:
- Information Technology Act, 2000 (IT Act) Section 66D - Cheating by personation using computer resource
- Indian Penal Code Section 469 - Forgery for purpose of harming reputation
- Bharatiya Nyaya Sanhita, 2023 Section 356 - Digital evidence manipulation

REPORT GENERATED BY: Cybercrime Division, Deepfake Detection System v2.0
AUTHORIZATION LEVEL: LAW ENFORCEMENT / INTERNAL USE ONLY
    `;
    
    // Create a blob and download it
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `deepfake-analysis-report-${new Date().toISOString().substring(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report Generated",
      description: "Forensic analysis report has been downloaded"
    });
    
    setIsGeneratingReport(false);
  };
  
  const generatePDFReport = async () => {
    try {
      setIsGeneratingPDF(true);
      
      // Create new PDF document
      const pdf = new jsPDF();
      
      // Add title
      pdf.setFontSize(16);
      pdf.setTextColor(0, 0, 128);
      pdf.text("CYBERCRIME DIVISION - FORENSIC IMAGE ANALYSIS REPORT", 20, 20, { align: 'center', maxWidth: 170 });
      
      // Add timestamp
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, 30);
      pdf.text(`Analysis ID: ${result.analysisId || 'N/A'}`, 20, 35);
      
      // Add analyzed image
      try {
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        
        await new Promise((resolve, reject) => {
          img.onload = resolve;
          img.onerror = reject;
          img.src = imageSrc;
        });
        
        // Calculate aspect ratio to fit within PDF
        const imgWidth = 160;
        const imgHeight = (img.height * imgWidth) / img.width;
        
        pdf.addImage(img, 'JPEG', 25, 40, imgWidth, imgHeight);
        
        // Move down past the image
        const yPos = 50 + imgHeight;
        
        // Add analysis results table
        autoTable(pdf, {
          startY: yPos,
          head: [['Analysis Parameter', 'Result']],
          body: [
            ['Determination', result.isDeepfake ? 'LIKELY MANIPULATED/SYNTHETIC' : 'LIKELY AUTHENTIC'],
            ['Authenticity Score', `${100 - scorePercent}%`],
            ['Manipulation Score', `${scorePercent}%`],
            ['Confidence Level', `${confidencePercent}%`],
            ['Faces Detected', `${faceCount}`],
            ['Analysis Date', `${new Date(result.analysisTimestamp).toLocaleString()}`],
            result.metadata?.generationMethod ? 
              ['Detected Method', result.metadata.generationMethod] : 
              ['Detected Method', 'None identified'],
            result.metadata?.faceInconsistencies ? 
              ['Face Inconsistencies', result.metadata.faceInconsistencies.toString()] : 
              ['Face Inconsistencies', 'None detected']
          ],
          theme: 'grid',
          headStyles: { fillColor: [50, 50, 100], textColor: [255, 255, 255] },
          alternateRowStyles: { fillColor: [240, 240, 250] }
        });
        
        // Add analysis summary
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        const finalY = (pdf as any).lastAutoTable.finalY + 10;
        pdf.text("ANALYSIS SUMMARY", 20, finalY);
        
        pdf.setFontSize(10);
        const summaryText = result.isDeepfake 
          ? 'The submitted image exhibits characteristics consistent with synthetic generation or manipulation. Forensic markers indicate possible use of generative adversarial networks (GANs) or other AI-based image synthesis methods.'
          : 'The submitted image does not contain significant indicators of digital manipulation or synthetic generation. This image appears to contain natural photographic elements consistent with authentic imagery.';
        
        pdf.setTextColor(0, 0, 0);
        pdf.text(pdf.splitTextToSize(summaryText, 170), 20, finalY + 10);
        
        // Add legal framework section
        let legalY = finalY + 30;
        pdf.setFontSize(12);
        pdf.text("LEGAL FRAMEWORK", 20, legalY);
        
        pdf.setFontSize(10);
        const legalText = "This analysis may be relevant under the following Indian legal frameworks:\n" +
          "- Information Technology Act, 2000 (IT Act) Section 66D - Cheating by personation using computer resource\n" +
          "- Indian Penal Code Section 469 - Forgery for purpose of harming reputation\n" +
          "- Bharatiya Nyaya Sanhita, 2023 Section 356 - Digital evidence manipulation";
        
        pdf.text(pdf.splitTextToSize(legalText, 170), 20, legalY + 10);
        
        // Add footer
        pdf.setFontSize(8);
        pdf.setTextColor(100, 100, 100);
        pdf.text("This report is generated by an automated system and should be reviewed by qualified forensic experts.", 20, 280);
        pdf.text("CONFIDENTIAL - FOR LAW ENFORCEMENT USE ONLY", 105, 285, { align: 'center' });
        
        // Save the PDF
        pdf.save(`forensic-analysis-report-${new Date().toISOString().substring(0, 10)}.pdf`);
      } catch (imgError) {
        console.error("Error adding image to PDF:", imgError);
        
        // Continue with PDF generation even without the image
        pdf.text("(Image could not be embedded in PDF report)", 20, 50);
        
        // Add analysis results table without the image
        autoTable(pdf, {
          startY: 60,
          head: [['Analysis Parameter', 'Result']],
          body: [
            ['Determination', result.isDeepfake ? 'LIKELY MANIPULATED/SYNTHETIC' : 'LIKELY AUTHENTIC'],
            ['Authenticity Score', `${100 - scorePercent}%`],
            ['Manipulation Score', `${scorePercent}%`],
            ['Confidence Level', `${confidencePercent}%`],
            ['Faces Detected', `${faceCount}`]
          ],
          theme: 'grid'
        });
        
        pdf.save(`forensic-analysis-report-${new Date().toISOString().substring(0, 10)}.pdf`);
      }
      
      toast({
        title: "PDF Report Generated",
        description: "Forensic analysis PDF report has been downloaded"
      });
    } catch (error) {
      console.error("Error generating PDF:", error);
      toast({
        title: "PDF Generation Failed",
        description: "Could not generate PDF report",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingPDF(false);
    }
  };
  
  const downloadImage = async () => {
    setIsDownloadingImage(true);
    
    try {
      // Create a blob and download the image
      const response = await fetch(imageSrc);
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `analyzed-image-${new Date().toISOString().substring(0, 10)}.png`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Image Downloaded",
        description: "Analyzed image has been downloaded"
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Could not download the image",
        variant: "destructive"
      });
      console.error("Error downloading image:", error);
    } finally {
      setIsDownloadingImage(false);
    }
  };
  
  return (
    <Card className="border-cyber-primary/20 bg-cyber-dark/90 backdrop-blur-sm overflow-hidden relative">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {result.isDeepfake ? (
            <>
              <ShieldX className="h-5 w-5 text-red-500" />
              <span className="text-red-500">Deepfake Detected</span>
            </>
          ) : (
            <>
              <ShieldCheck className="h-5 w-5 text-green-500" />
              <span className="text-green-500">Authentic Image</span>
            </>
          )}
        </CardTitle>
        <div className="text-xs text-muted-foreground flex items-center gap-1">
          <Clock className="h-3 w-3" />
          {new Date(result.analysisTimestamp).toLocaleString()}
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="aspect-square relative overflow-hidden rounded-md border border-cyber-primary/20">
            <img 
              src={imageSrc} 
              alt="Analyzed image" 
              className="w-full h-full object-cover"
            />
            {/* Overlay mask that shows "hotspots" for deepfakes */}
            {result.isDeepfake && (
              <div className="absolute inset-0 bg-gradient-radial from-red-500/0 to-red-500/30 mix-blend-overlay pointer-events-none"></div>
            )}
            
            {/* Face detection indicators */}
            {faceCount > 0 && (
              <div className="absolute bottom-2 left-2 bg-black/70 text-white text-xs py-1 px-2 rounded-md flex items-center">
                <AlertCircle className="h-3 w-3 mr-1" />
                {faceCount} {faceCount === 1 ? 'face' : 'faces'} detected
              </div>
            )}
          </div>
          
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium mb-1">Analysis Results:</h3>
              <div className="space-y-3">
                <div>
                  <span className="text-xs text-muted-foreground">Authenticity Score:</span>
                  <div className="relative pt-1">
                    <Progress 
                      value={100 - scorePercent} 
                      className={`h-2 mt-1 ${result.isDeepfake ? "bg-red-900/20" : "bg-green-900/20"}`}
                    />
                    <div className="absolute top-0 left-0 w-full">
                      <Progress 
                        value={scorePercent} 
                        className={`h-2 ${result.isDeepfake ? "bg-red-500" : "bg-green-500"}`}
                      />
                    </div>
                  </div>
                  <div className="flex justify-between text-xs mt-1">
                    <span>Synthetic ({scorePercent}%)</span>
                    <span>Authentic ({100 - scorePercent}%)</span>
                  </div>
                </div>
                
                <div>
                  <span className="text-xs text-muted-foreground">Confidence:</span>
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">{confidencePercent}%</span>
                    <Badge variant={confidencePercent > 80 ? "default" : "outline"}>
                      {confidencePercent > 80 ? "High" : confidencePercent > 50 ? "Medium" : "Low"}
                    </Badge>
                  </div>
                </div>
                
                <div>
                  <span className="text-xs text-muted-foreground">Faces detected:</span>
                  <span className="text-sm font-medium block">{faceCount}</span>
                </div>
                
                {result.metadata && (
                  <div className="space-y-2 bg-cyber-primary/5 rounded-md p-2 mt-2">
                    <h4 className="text-xs font-semibold flex items-center">
                      <BarChart3 className="h-3 w-3 mr-1" />
                      Technical Details
                    </h4>
                    
                    {result.metadata.generationMethod && result.metadata.generationMethod !== 'None' ? (
                      <div>
                        <span className="text-xs text-muted-foreground">Detection method:</span>
                        <span className="text-xs font-medium block">{result.metadata.generationMethod}</span>
                      </div>
                    ) : (
                      <div>
                        <span className="text-xs text-muted-foreground">Detection method:</span>
                        <span className="text-xs font-medium block">Neural analysis</span>
                      </div>
                    )}
                    
                    {result.metadata.manipulationScore !== undefined && (
                      <div>
                        <span className="text-xs text-muted-foreground">Manipulation score:</span>
                        <span className="text-xs font-medium block">
                          {Math.round(result.metadata.manipulationScore * 100)}%
                        </span>
                      </div>
                    )}
                    
                    {result.metadata.faceInconsistencies !== undefined && result.metadata.faceInconsistencies > 0 && (
                      <div>
                        <span className="text-xs text-muted-foreground">Face inconsistencies:</span>
                        <span className="text-xs font-medium block">{result.metadata.faceInconsistencies}</span>
                      </div>
                    )}
                    
                    {result.metadata.detectedArtifacts && result.metadata.detectedArtifacts.length > 0 && (
                      <div>
                        <span className="text-xs text-muted-foreground">Artifacts:</span>
                        <span className="text-xs font-medium block">{result.metadata.detectedArtifacts.join(', ')}</span>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
            
            <Alert className={result.isDeepfake ? "border-red-500 bg-red-500/10" : "border-green-500 bg-green-500/10"}>
              {result.isDeepfake ? (
                <AlertTriangle className="h-4 w-4 text-red-500" />
              ) : (
                <CheckCircle className="h-4 w-4 text-green-500" />
              )}
              <AlertDescription>
                {result.isDeepfake 
                  ? "This image appears to be synthetically generated or manipulated. Use with caution."
                  : "This image appears to be authentic with no significant indicators of manipulation."}
              </AlertDescription>
            </Alert>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col sm:flex-row flex-wrap gap-2 pt-2 pb-4">
        <Button 
          onClick={generateReport} 
          className="w-full sm:w-auto"
          disabled={isGeneratingReport}
        >
          {isGeneratingReport ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <FileText className="mr-2 h-4 w-4" />
              Text Report
            </>
          )}
        </Button>
        
        <Button 
          onClick={generatePDFReport} 
          className="w-full sm:w-auto"
          disabled={isGeneratingPDF}
        >
          {isGeneratingPDF ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating PDF...
            </>
          ) : (
            <>
              <FileDown className="mr-2 h-4 w-4" />
              PDF Report
            </>
          )}
        </Button>
        
        <Button 
          variant="outline" 
          className="w-full sm:w-auto"
          onClick={downloadImage}
          disabled={isDownloadingImage}
        >
          {isDownloadingImage ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Downloading...
            </>
          ) : (
            <>
              <Download className="mr-2 h-4 w-4" />
              Download Image
            </>
          )}
        </Button>
        
        <Button variant="secondary" onClick={onClose} className="w-full sm:w-auto">
          Remove
        </Button>
      </CardFooter>
    </Card>
  );
}
